// Version  1.1 Arduino NANO - using ECG (AD 8232) sensor

// 2024/09/25 - simple arduino code to robotic orthesis (hand grip) controlled by myoelectric signal
// 3D model available in https://www.thingiverse.com/thing:66818
// 3D case model available in https://www.thingiverse.com/thing:2131085
// myoelectrical signal sensor (EMG) available in //https://github.com/LENeR-UEL/AD8232_aquisition_circuit
// No buffer to MES

//------------------------------------------------------------------- Libraries -------------------------------------------------------------------
#include <Arduino.h>
#include <ArduinoJson.h>
#include <math.h>
#include <filters.h>  // available in: https://github.com/MartinBloedorn/libFilter
#include <Servo.h>

//------------------------------------------------------------------- Variables -------------------------------------------------------------------
Servo myservo;
int led = 13;
int flag = 0;
int Claw = 7;
int grip = 2;
int mesCount = 0;  	// Counter for when mesGrip < 8
float Gain_pin = A3;
float EMG = A0;
float MESgrip = 0;

//---------------------------------------------------------------------- MES ----------------------------------------------------------------------
float MValue = 0;  // MES - Myo Electrical Signal
float Voltage;
float x = 0;
float difficult = 16;  // Difficult to App inventor (16%)
float filteredval = 0;
float filteredval1 = 0;
float filteredval2 = 0;
float filteredval3 = 0;
float filteredval4 = 0;
float filteredval5 = 0;
float filteredval6 = 0;
float filteredval7 = 0;
float filteredval8 = 0;
float filteredval9 = 0;
float filteredval10 = 0;
float filteredval11 = 0;
float filteredval12 = 0;
float filteredval13 = 0;
float filteredval14 = 0;
float filteredval15 = 0;
float filteredval16 = 0;
float filteredval17 = 0;
float filteredval18 = 0;
float filteredval19 = 0;
float filteredval20 = 0;

float MES01 = 0;
float MES02 = 0;

float MES_X = 0;
float MES1 = 0;
float MES2 = 0;
float MESth = 0;

float MES_001A = 0;
float MES_001B = 0;
float MES_002A = 0;
float MES_002B = 0;

//------------------------------------------------------------------- MES Filter ------------------------------------------------------------------
const float f2 = 40.0;                      	// Cutoff frequency in Hz
const float f1 = 10.0;                      	// Cutoff frequency in Hz
const float sampling_time = 0.01;           	// Sampling time in seconds.
IIR::ORDER order = IIR::ORDER::OD3;         	// Butterworth - Oder (OD1 to OD4)
IIR::TYPE typeHP = IIR::TYPE::HIGHPASS;
Filter fHP(f1, sampling_time, order, typeHP);  // Configure high pass filter (40 Hz)
Filter fLP(f2, sampling_time, order);      	// Configure low pass filter (10 Hz)

//--------------------------------------------------------------------- Gain ----------------------------------------------------------------------
const int sensorPin = Gain_pin;  // Potentiometer for gain adjustment
float sensorVal;             	// Analog value from the sensor
int gain;                    	// Gain defined by the potentiometer; 0 -> 0, 1023 -> 50

//--------------------------------------------------------------------- SETUP ---------------------------------------------------------------------
void setup() {
  pinMode(led, OUTPUT);     	// LED red
  myservo.attach(Claw);     	// Motor Digital Pin
  myservo.write(grip);      	// Close claw
  MValue = (analogRead(EMG));   // MES
  digitalWrite(led, HIGH);  	// Blink thrice
  delay(1000);
  digitalWrite(led, LOW);
  delay(1000);
  digitalWrite(led, HIGH);
  delay(1000);
  digitalWrite(led, LOW);
  delay(1000);
  digitalWrite(led, HIGH);
  delay(1000);
  digitalWrite(led, LOW);
  myservo.write(100);       	// Open claw
  delay(1000);
  Serial.begin(9600);       	// Initialize Serial Monitor
}

//----------------------------------------------------------------- Read samples -----------------------------------------------------------------
void MES_00() {
  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval1 = fLP.filterIn(Voltage);
  filteredval1 = fHP.filterIn(filteredval1);
  filteredval1 = abs(filteredval1);
  filteredval1 = filteredval1 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval2 = fLP.filterIn(Voltage);
  filteredval2 = fHP.filterIn(filteredval2);
  filteredval2 = abs(filteredval2);
  filteredval2 = filteredval2 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval3 = fLP.filterIn(Voltage);
  filteredval3 = fHP.filterIn(filteredval3);
  filteredval3 = abs(filteredval3);
  filteredval3 = filteredval3 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval4 = fLP.filterIn(Voltage);
  filteredval4 = fHP.filterIn(filteredval4);
  filteredval4 = abs(filteredval4);
  filteredval4 = filteredval4 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval5 = fLP.filterIn(Voltage);
  filteredval5 = fHP.filterIn(filteredval5);
  filteredval5 = abs(filteredval5);
  filteredval5 = filteredval5 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval6 = fLP.filterIn(Voltage);
  filteredval6 = fHP.filterIn(filteredval6);
  filteredval6 = abs(filteredval6);
  filteredval6 = filteredval6 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval7 = fLP.filterIn(Voltage);
  filteredval7 = fHP.filterIn(filteredval7);
  filteredval7 = abs(filteredval7);
  filteredval7 = filteredval7 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval8 = fLP.filterIn(Voltage);
  filteredval8 = fHP.filterIn(filteredval8);
  filteredval8 = abs(filteredval8);
  filteredval8 = filteredval8 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval9 = fLP.filterIn(Voltage);
  filteredval9 = fHP.filterIn(filteredval9);
  filteredval9 = abs(filteredval9);
  filteredval9 = filteredval9 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval10 = fLP.filterIn(Voltage);
  filteredval10 = fHP.filterIn(filteredval10);
  filteredval10 = abs(filteredval10);
  filteredval10 = filteredval10 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval11 = fLP.filterIn(Voltage);
  filteredval11 = fHP.filterIn(filteredval11);
  filteredval11 = abs(filteredval11);
  filteredval11 = filteredval11 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval12 = fLP.filterIn(Voltage);
  filteredval12 = fHP.filterIn(filteredval12);
  filteredval12 = abs(filteredval12);
  filteredval12 = filteredval12 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval13 = fLP.filterIn(Voltage);
  filteredval13 = fHP.filterIn(filteredval13);
  filteredval13 = abs(filteredval13);
  filteredval13 = filteredval13 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval14 = fLP.filterIn(Voltage);
  filteredval14 = fHP.filterIn(filteredval14);
  filteredval14 = abs(filteredval14);
  filteredval14 = filteredval14 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval15 = fLP.filterIn(Voltage);
  filteredval15 = fHP.filterIn(filteredval15);
  filteredval15 = abs(filteredval15);
  filteredval15 = filteredval15 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval16 = fLP.filterIn(Voltage);
  filteredval16 = fHP.filterIn(filteredval16);
  filteredval16 = abs(filteredval16);
  filteredval16 = filteredval16 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval17 = fLP.filterIn(Voltage);
  filteredval17 = fHP.filterIn(filteredval17);
  filteredval17 = abs(filteredval17);
  filteredval17 = filteredval17 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval18 = fLP.filterIn(Voltage);
  filteredval18 = fHP.filterIn(filteredval18);
  filteredval18 = abs(filteredval18);
  filteredval18 = filteredval18 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval19 = fLP.filterIn(Voltage);
  filteredval19 = fHP.filterIn(filteredval19);
  filteredval19 = abs(filteredval19);
  filteredval19 = filteredval19 * 100;
  delay(1);


  MValue = (analogRead(EMG));
  Voltage = ((((3.3 / 1024.0) * (MValue))));
  float filteredval20 = fLP.filterIn(Voltage);
  filteredval20 = fHP.filterIn(filteredval20);
  filteredval20 = abs(filteredval20);
  filteredval20 = filteredval20 * 100;
  delay(1);


  // 10ms average -  build AWL to calculate the threshold
  MES01 = (filteredval1 + filteredval2 + filteredval3 + filteredval4 + filteredval5 + filteredval6 + filteredval7 + filteredval8 + filteredval9 + filteredval10) / 10;

  // 10ms average -  build AWL to calculate the threshold
  MES02 = (filteredval11 + filteredval12 + filteredval13 + filteredval14 + filteredval15 + filteredval16 + filteredval17 + filteredval18 + filteredval19 + filteredval20) / 10;

  MES01 = MES01 * 100;  // Inserted 2022 - if use other EMG sensor, the gain must be adjusted
  MES02 = MES02 * 100;  // Inserted 2022 - if use other EMG sensor, the gain must be adjusted


  // MES_X - create average 20ms (like root mean square)
  MES_X = (MES01 + MES02) / 100;  // Must be adjusted to each MES sensor.
                              	// values must be between 1 and 3 during rest and greater than 10 during contraction.
}

//---------------------------------------------------------------------- LOOP ----------------------------------------------------------------------
void loop() {
  //MES1 - RMS-40ms
  MES_00();
  MES_001A = MES_X;  //20ms
  MES_00();
  MES_001B = MES_X;  //20ms
  MES1 = (MES_001A + MES_001B) / 2;

  sensorVal = analogRead(sensorPin);         	// Read potentiometer as analog value
  gain = ((sensorVal / 1023) * (20 - 10)) + 10;  // Map potentiometer values from 15 to 22 as floats for fine adjustment
  MESgrip = (((MES1) / 10) * gain);          	// "2" -> ajuste do ganho

  Serial.println(MESgrip);
  Serial.println(" ");
  Serial.println(gain);

  if (MESgrip >= 10 && flag == 0) {   // Adjust the MES threshold
	grip = grip - 10;
	digitalWrite(LED_BUILTIN, HIGH);  // Turn the LED on (HIGH is the voltage level)
  }                               	// Opening grip

  if (MESgrip <= 8 && flag == 0) {	// Adjust the FSR and MES threshold: && fsrreading <250
	grip = grip + 10;
	digitalWrite(LED_BUILTIN, LOW);   // turn the LED on (HIGH is the voltage level)
  }

  if (grip >= 100 && flag == 0) {
	grip = 100;
  }  //open grip

  if (grip <= 2 && flag == 0) {
	grip = 2;
	flag = 1;
	myservo.write(grip);
	delay(1);
  }  //close grip


  // if (MESgrip > 10 && flag == 1) { 	// adjust the MES threshold
  //   grip = grip - 10;
  //   digitalWrite(LED_BUILTIN, HIGH);   // Turn the LED on (HIGH is the voltage level)
  // }                                	// Opening grip

  if (MESgrip < 8 && flag == 1) { 	// Adjust the FSR and MES threshold: && fsrreading <250
	grip = grip + 10;
	mesCount = mesCount + 1;      	// Claw closed and ECG signal is under threshold (8)
	digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (HIGH is the voltage level)
  }

  if (grip > 100 && flag == 1 && mesCount == 50) { // If claw is closed and ECG signals have gone under the threshold at least 50 times, set motor position to open but don't open yet.
	grip = 100;
  }  //open grip

  //Serial.println(grip);
  if (flag == 0) {
	myservo.write(grip);
	delay(1);
  }

  //Serial.println(grip);
  if (flag == 1 && grip == 100 && mesCount == 50) { // If claw is closed and ECG signals have gone under the threshold at least 50 times, then open the claw
	myservo.write(grip);
	flag = 0;
	mesCount = 0;
	delay(1);
  }
}  //end
